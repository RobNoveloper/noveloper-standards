# Setting Up a Custom API Subdomain for Noveloper

✅ COMPLETED: The api.noveloper.ai subdomain has been successfully set up and the code has been updated to use it!

✅ COMPLETED: The api.noveloper.ai subdomain has been successfully set up and the code has been updated to use it!

This document outlines the process that was followed to set up `api.noveloper.ai` as a custom domain for your Railway backend to properly resolve CORS issues.

## Current Architecture
- Frontend: Hosted on Vercel (www.noveloper.ai)
- Backend: Hosted on Railway (currently at noveloper-website-production.up.railway.app)
- Database: PostgreSQL on Supabase

## Why We Need an API Subdomain
The current direct linking between www.noveloper.ai (frontend) and noveloper-website-production.up.railway.app (backend) experiences CORS (Cross-Origin Resource Sharing) issues because they are on different domains. This blocks API requests from the frontend to the backend in production.

## Step 1: Configure Custom Domain on Railway

1. Log in to your Railway dashboard: https://railway.app/dashboard
2. Select the Noveloper website project
3. Go to "Settings" > "Domains"
4. Add a new custom domain: `api.noveloper.ai`
5. Railway will provide DNS records that need to be added to your domain provider

## Step 2: Update DNS Records at Your Domain Registrar

1. Log in to your domain provider where noveloper.ai is registered
2. Navigate to the DNS settings for noveloper.ai
3. Add the following DNS records (values provided by Railway):
   - Add a CNAME record for `api` pointing to Railway's domain verification endpoint
   - (Optional) Add any TXT records if required by Railway

## Step 3: Wait for DNS Propagation

DNS changes typically take 24-48 hours to propagate fully across the internet, although they often take effect within a few hours.

## Step 4: Update Frontend Configuration

Once the custom domain is active, update your frontend code to use the new API endpoint:

// In client/src/components/contact-section.tsx and any other API-calling components

// Determine API URL based on environment
let apiUrl = '/api/contact';

// Use the subdomain API URL for production websites
const isProdSite = window.location.hostname === 'www.noveloper.ai' || 
                   window.location.hostname === 'noveloper.ai';

if (isProdSite) {
  // Use the custom API subdomain which avoids CORS issues
  apiUrl = 'https://api.noveloper.ai/api/contact';
  console.log(`Using production API endpoint: ${apiUrl}`);
}

## Step 5: Update CORS Configuration on Backend

In your backend, update the CORS configuration to explicitly allow your custom domain:

// In server/index.ts

app.use(cors({
  origin: [
    'http://localhost:3000',
    'http://localhost:5173',
    'https://noveloper.ai',
    'https://www.noveloper.ai'
  ],
  credentials: true
}));

## Step 6: Deploy and Test

1. Commit and push these changes to your repository
2. Verify that Railway and Vercel have deployed the latest versions
3. Test the contact form and newsletter subscription functionality on the live site

## Benefits of This Setup

1. CORS Compliance: Requests from your frontend to your API will now use the same root domain (noveloper.ai), which simplifies CORS requirements
2. Professional Appearance: The api.noveloper.ai subdomain looks more professional than a Railway default URL
3. Improved Security: Allows for better control over cross-origin policies
4. Future Flexibility: Makes it easier to migrate your backend between hosting providers if needed

## Troubleshooting

If you encounter any issues with the custom domain setup:

1. DNS Verification: Ensure the DNS records are correctly set up with your domain registrar
2. HTTPS Certificate: Railway should automatically provision an SSL certificate, but verify it's working correctly
3. CORS Headers: Double-check that your server is sending the correct CORS headers
4. Cache Issues: Clear browser cache when testing to ensure you're getting fresh responses

For any additional help, contact Railway support or your domain registrar support team.
